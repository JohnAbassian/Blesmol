using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Mail;
using System.ServiceProcess;
using System.Threading;
using System.Linq;

namespace Blesmol {
	public partial class Core : ServiceBase {
		private readonly Config c = new Config();
		private DateTime? _DoNotSendUntilAfter;
		private Thread _WorkerThread;
		private readonly List<DriveStatus> AlertingDrives = new List<DriveStatus>();

		public Core() {
			InitializeComponent();
		}

		protected override void OnStart(String[] args) {
			c.LoadConfig();
			_WorkerThread = new Thread(new ThreadStart(MonitorDisks)) {
				Name = "workerThread"
			};
			_WorkerThread.Start();
		}

		private void MonitorDisks() {
			for (; ; ) {
				if (_DoNotSendUntilAfter == null || DateTime.Now.CompareTo(_DoNotSendUntilAfter) == 1) {
					DriveInfo[] allDrives = DriveInfo.GetDrives();
					foreach (DriveInfo driveInfo in allDrives) {
						try {
							String driveName = driveInfo.Name.Replace(@":\", "");
							if (driveInfo.IsReady && c.DisksToMonitor.Contains(driveName) == true) {
								Boolean alerting = AlertingDrives.Any(x => x.DriveName == driveName);
								Boolean cleared = false;

								if (!ThresholdPassed(driveInfo.TotalSize, driveInfo.TotalFreeSpace, c.ThresholdAmount, c.ThresholdUnit)) {
									if (!alerting) continue;
									else cleared = true;
								}

								if (!alerting) AlertingDrives.Add(new DriveStatus() { DriveName = driveName, Alerting = true, AlertingStartTime = DateTime.Now });
								if (cleared) AlertingDrives.Remove(AlertingDrives.FirstOrDefault(x => x.DriveName == driveName));
								SendAlerts(driveName, c.ThresholdAmount.ToString(), c.ThresholdUnit, AlertingDrives.FirstOrDefault(x => x.DriveName == driveInfo.Name)?.AlertingStartTime ?? DateTime.Now, cleared);
							}
						} catch { }
					}
				}
				System.Threading.Thread.Sleep(System.TimeSpan.FromMinutes(AlertingDrives.Any(x => x.Alerting) ? c.EmailDelay : c.SleepInterval));
			}

			Boolean ThresholdPassed(long driveSize, long freeSpace, double threshold, String unit) {
				if (unit == "%") return freeSpace <= (driveSize * (threshold / 100));
				else return freeSpace < Utils.ConvertToBytes(c.ThresholdAmount, c.ThresholdUnit);
			}
		}

		private void SendAlerts(String drive, String thresholdAmount, String thresholdUnit, DateTime eventTime, Boolean cleared) {
			_DoNotSendUntilAfter = DateTime.Now.AddMinutes(c.EmailDelay);

			SmtpClient mail = new SmtpClient(c.SmtpServer, Convert.ToInt32(c.SmtpServerPort)) {
				UseDefaultCredentials = false,
				Credentials = new System.Net.NetworkCredential(c.SmtpServerUsername, c.SmtpServerPassword),
				EnableSsl = true
			};

			String text = cleared ? "<p style='font-family:helvetica,arial,sans-serif;font-size:83%;'>Disk space is no longer low on " +
									c.MachineName + "<br/>Free space on " + drive + " is greater than " + thresholdAmount +
									thresholdUnit + " since " + eventTime + "<br/><br/><small>This is an automated email generated by Blesmol</small></p>"
										: "<p style='font-family:helvetica,arial,sans-serif;font-size:83%;'>Disk space is low on " +
										c.MachineName + "<br/>Free space on " + drive + " is less than " + thresholdAmount +
										thresholdUnit + " since " + eventTime + "<br/><br/><small>This is an automated email generated by Blesmol</small></p>";

			String subject = cleared ? "Disk space is no longer low on " + drive + " on " + c.MachineName : "Warning! Disk space is low on " + drive + " on " + c.MachineName;

			foreach (MailMessage message in c.EmailAddresses.Select(email => new MailMessage("alerts@reliant.org", email,
				subject,
				text) {
				IsBodyHtml = true
			})){
				mail.Send(message);
			}

		}
		internal class DriveStatus {
			public String DriveName { get; set; }
			public Boolean Alerting { get; set; }
			public DateTime AlertingStartTime { get; set; }
		}

		protected override void OnStop() {
			_WorkerThread.Abort();
		}

		static void Main() {
#if DEBUG
			Core DebugService = new Core();
			DebugService.OnStart(null);
#else
			ServiceBase[] ServicesToRun;
			ServicesToRun = new ServiceBase[]
			{
				new Core()
			};
			ServiceBase.Run(ServicesToRun);
#endif
		}
	}
}
